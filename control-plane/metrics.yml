# API server

- query: histogram_quantile(0.99, sum(irate(apiserver_request_duration_seconds_bucket{apiserver="kube-apiserver", verb=~"LIST|GET", subresource!~"log|exec|portforward|attach|proxy"}[2m])) by (le, resource, verb, scope)) > 0
  metricName: readOnlyAPICallsLatency

- query: histogram_quantile(0.99, sum(irate(apiserver_request_duration_seconds_bucket{apiserver="kube-apiserver", verb=~"POST|PUT|DELETE|PATCH", subresource!~"log|exec|portforward|attach|proxy"}[2m])) by (le, resource, verb, scope)) > 0
  metricName: mutatingAPICallsLatency

- query: sum(irate(apiserver_request_total{apiserver="kube-apiserver",verb!="WATCH"}[2m])) by (verb,resource,code) > 0
  metricName: APIRequestRate

- query: topk(15, sum(apiserver_longrunning_requests) by (resource))
  metricName: topLongRuningRequests

# Containers & pod metrics

- query: (sum(irate(container_cpu_usage_seconds_total{name!="",container!="POD",namespace=~"openshift-(etcd|oauth-apiserver|ovn-kubernetes|multus|.*apiserver|authentication|.*controller-manager|.*scheduler)"}[2m]) * 100) by (container, pod, namespace, node) and on (node) kube_node_role{role="master"}) > 0
  metricName: containerCPU-Masters

- query: (sum(irate(container_cpu_usage_seconds_total{name!="",container!="POD",namespace=~"openshift-(ovn-kubernetes|multus)"}[2m]) * 100) by (container, pod, namespace, node) and on (node) kube_node_role{role="worker"}) > 0
  metricName: containerCPU-Workers

- query: (sum(container_memory_working_set_bytes{name!="",container!="POD",namespace=~"openshift-(etcd|oauth-apiserver|.*apiserver|ovn-kubernetes|multus|authentication|.*controller-manager|.*scheduler)"}) by (container, pod, namespace, node) and on (node) kube_node_role{role="master"}) > 0
  metricName: containerMemory-Masters

- query: (sum(container_memory_working_set_bytes{name!="",container!="POD",namespace=~"openshift-(sdn|ovn-kubernetes|multus)"}) by (container, pod, namespace, node) and on (node) kube_node_role{role="worker"}) > 0
  metricName: containerMemory-Workers

# Node metrics: CPU & Memory

- query: (sum(irate(node_cpu_seconds_total[2m])) by (mode,instance) and on (instance) label_replace(kube_node_role{role="master"}, "instance", "$1", "node", "(.+)")) > 0
  metricName: nodeCPU-Masters

- query: (sum(irate(node_cpu_seconds_total[2m])) by (mode,instance) and on (instance) label_replace(kube_node_role{role="worker"}, "instance", "$1", "node", "(.+)")) > 0
  metricName: nodeCPU-Workers

# We compute memory utilization by subtracting available memory to the total

- query: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) and on (instance) label_replace(kube_node_role{role="worker"}, "instance", "$1", "node", "(.+)")
  metricName: nodeMemoryUtilization-Workers

- query: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) and on (instance) label_replace(kube_node_role{role="master"}, "instance", "$1", "node", "(.+)")
  metricName: nodeMemoryUtilization-Masters

# Etcd metrics

- query: sum(rate(etcd_server_leader_changes_seen_total[2m])) > 0
  metricName: etcdLeaderChangesRate

- query: histogram_quantile(0.99, rate(etcd_disk_backend_commit_duration_seconds_bucket[2m]))
  metricName: 99thEtcdDiskBackendCommitDurationSeconds

- query: histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket[2m]))
  metricName: 99thEtcdDiskWalFsyncDurationSeconds

- query: histogram_quantile(0.99, rate(etcd_network_peer_round_trip_time_seconds_bucket[5m]))
  metricName: 99thEtcdRoundTripTimeSeconds

- query: sum by (cluster_version)(etcd_cluster_version)
  metricName: etcdVersion
  instant: true

# Istio metrics

- query: sum(irate(container_cpu_usage_seconds_total{name!="",container!="POD",namespace=~"istio-system"}[2m]) * 100) by (pod) > 0
  metricName: istio-system-cpu

- query: sum(container_memory_working_set_bytes{name!="",container!="POD",namespace="istio-system"}) by (pod)
  metricName: istio-system-memory

- query: sum(irate(container_cpu_usage_seconds_total{container="istio-proxy", namespace!="istio-system"}[2m]) * 100) > 0
  metricName: istio-proxy-cpu

- query: sum(container_memory_working_set_bytes{container="istio-proxy", namespace!="istio-system"})
  metricName: istio-proxy-memory

# Cluster metrics

- query: sum(kube_namespace_status_phase) by (phase) > 0
  metricName: namespaceCount

- query: sum(kube_pod_status_phase{}) by (phase)
  metricName: podStatusCount

- query: count(kube_service_info{})
  metricName: serviceCount

- query: kube_node_role
  metricName: nodeRoles

- query: sum(kube_node_status_condition{status="true"}) by (condition)
  metricName: nodeStatus
